""" 
Generated by ChatGPT v4
Input prompt:
	Write a python script that will read in a csv file with the columns ['OriginalFilePath', 'PathLength', 'FolderPath', 'FolderDepth', 'IsInvalidFoldername', 'IsInvalidFilename'] and generates a text file that shows the folder tree structure for the paths that start with a path given as an argument. There is an optional argument that limits the depth of the folder structure to document. There is an optional argument that limits the rows to be included to ones that have PathLength greater it.
    
Modification:
    Modify this script to accept named optional arguments 'depth' and 'min-length'. 
"""
import csv
import os
import argparse

INPUTFILE = './raw-data/mjs-filepaths.csv'
OUTPUTFILE = './outputs/folder-tree.txt'

def generate_tree(input_file, output_file, root_path, max_depth=None, min_length=None):
    paths = set()

    with open(input_file, 'r') as in_file:
        reader = csv.DictReader(in_file)
        for row in reader:
            path = row['FolderPath']
            if path.startswith(root_path) and (min_length is None or int(row['PathLength']) > min_length):
                paths.add(path)

    with open(output_file, 'w') as out_file:
        for path in sorted(paths):
            depth = path.count(os.sep) - root_path.count(os.sep)
            if max_depth is not None and depth > max_depth:
                continue

            indent = '  ' * depth
            out_file.write(f"{indent}{os.path.basename(path)} ({len(path)})\n")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Generate a folder tree.')
    parser.add_argument('root_path', help='The root path to start from')
    parser.add_argument('--depth', type=int, help='The maximum depth of the folder structure')
    parser.add_argument('--min-length', type=int, help='The minimum path length')

    args = parser.parse_args()

    generate_tree(INPUTFILE, OUTPUTFILE, args.root_path, args.depth, args.min_length)
